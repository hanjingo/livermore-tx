#ifndef ERROR_H
#define ERROR_H

#include <hj/testing/error.hpp>
#include <hj/util/init.hpp>
#include <hj/util/once.hpp>
#include <iostream>

namespace livermore::tx
{

using err_t           = std::error_code;
static const err_t OK = err_t();

// NOTE: generated by CHATGPT
INIT_ONCE(
    // register our error codes start
    hj::register_err("tx", 0x10000, "read config failed");
    hj::register_err("tx", 0x10001, "invalid config name");

    hj::register_err("tx", 0x11000, "log fail");
    hj::register_err("tx", 0x11001, "log file size too small");
    hj::register_err("tx", 0x11002, "log file size too big");
    hj::register_err("tx", 0x11003, "log file num too small");
    hj::register_err("tx", 0x11004, "log file num too big");
    hj::register_err("tx", 0x11005, "log level too small");
    hj::register_err("tx", 0x11006, "log level too big");

    hj::register_err("tx", 0x12000, "crash fail");
    hj::register_err("tx", 0x12001, "crash path permission denied");

    hj::register_err("tx", 0x13000, "instrument path not exist");
    // register our error codes end
);

namespace error
{
// make our error codes start
static const err_t READ_CONFIG_FAILED = hj::make_err(0x10000, "tx");

static const err_t LOG_FAIL                = hj::make_err(0x11000, "tx");
static const err_t LOG_FILE_SIZE_TOO_SMALL = hj::make_err(0x11001, "tx");
static const err_t LOG_FILE_SIZE_TOO_BIG   = hj::make_err(0x11002, "tx");
static const err_t LOG_FILE_NUM_TOO_SMALL  = hj::make_err(0x11003, "tx");
static const err_t LOG_FILE_NUM_TOO_BIG    = hj::make_err(0x11004, "tx");
static const err_t LOG_LEVEL_TOO_SMALL     = hj::make_err(0x11005, "tx");
static const err_t LOG_LEVEL_TOO_BIG       = hj::make_err(0x11006, "tx");

static const err_t CRASH_FAIL                   = hj::make_err(0x12000, "tx");
static const err_t CRASH_PATH_PERMISSION_DENIED = hj::make_err(0x12001, "tx");

static const err_t INSTRUMENT_PATH_NOT_EXIST = hj::make_err(0x13000, "tx");
// make our error codes end
}

} // namespace livermore::tx

#endif