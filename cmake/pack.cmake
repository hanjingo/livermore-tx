install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)


if (NOT CPACK_PACKAGE_NAME OR CPACK_PACKAGE_NAME STREQUAL "")
    set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
endif()

if (NOT CPACK_PACKAGE_VERSION OR CPACK_PACKAGE_VERSION STREQUAL "")
    set(CPACK_PACKAGE_VERSION "${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}")
endif()

if (NOT CPACK_PACKAGE_VENDOR OR CPACK_PACKAGE_VENDOR STREQUAL "")
    set(CPACK_PACKAGE_VENDOR "${PACKAGE_VENDOR}")
endif()

if (NOT CPACK_PACKAGE_DESCRIPTION_SUMMARY OR CPACK_PACKAGE_DESCRIPTION_SUMMARY STREQUAL "")
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PACKAGE_DESCRIPTION_SUMMARY}")
endif()

if (NOT CPACK_PACKAGE_CONTACT OR CPACK_PACKAGE_CONTACT STREQUAL "")
    set(CPACK_PACKAGE_CONTACT "${PACKAGE_CONTACT}")
endif()

if (NOT CPACK_PACKAGE_INSTALL_DIRECTORY OR CPACK_PACKAGE_INSTALL_DIRECTORY STREQUAL "")
    set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PACKAGE_NAME}")
endif()

if (NOT CPACK_RESOURCE_FILE_LICENSE OR CPACK_RESOURCE_FILE_LICENSE STREQUAL "")
    set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/${PACKAGE_RESOURCE_FILE_LICENSE}")
endif()

set(CPACK_PACKAGE_EXECUTABLES "${PROJECT_NAME}" "${PROJECT_NAME}")
set(CPACK_SOURCE_GENERATOR "TGZ;ZIP")

if(WIN32)
    set(CPACK_GENERATOR "NSIS;ZIP")
    set(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_NAME}")
    set(CPACK_NSIS_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
    set(CPACK_NSIS_CONTACT "${CPACK_PACKAGE_CONTACT}")
    set(CPACK_NSIS_MODIFY_PATH ON)
    # set(CPACK_NSIS_MUI_ICON "${CMAKE_SOURCE_DIR}/res/framework.ico")
    set(CPACK_NSIS_INSTALLED_ICON_NAME "bin/${CPACK_PACKAGE_NAME}.exe")
    set(CPACK_NSIS_HELP_LINK "${CPACK_PACKAGE_BUGREPORT}")
    set(CPACK_NSIS_URL_INFO_ABOUT "${CPACK_PACKAGE_BUGREPORT}")
    set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
    set(CPACK_NSIS_CREATE_ICONS_EXTRA "CreateShortCut '$DESKTOP/${CPACK_PACKAGE_NAME}.lnk' '$INSTDIR/bin/${CPACK_PACKAGE_NAME}.exe'")
    set(CPACK_NSIS_DELETE_ICONS_EXTRA "Delete '$DESKTOP/${CPACK_PACKAGE_NAME}.lnk'")
elseif(APPLE)
    set(CPACK_GENERATOR "DragNDrop;TGZ;ZIP")
    set(CPACK_DMG_BACKGROUND_IMAGE "")
    set(CPACK_DMG_DS_STORE_SETUP_SCRIPT "")
    set(CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK ON)
    set(CPACK_DMG_VOLUME_NAME "${CPACK_PACKAGE_NAME}")
elseif(UNIX)
    find_program(LSB_RELEASE_EXEC lsb_release)
    if(LSB_RELEASE_EXEC)
        execute_process(COMMAND ${LSB_RELEASE_EXEC} -is OUTPUT_VARIABLE LSB_ID OUTPUT_STRIP_TRAILING_WHITESPACE)
        if(LSB_ID STREQUAL "Ubuntu" OR LSB_ID STREQUAL "Debian")
            set(CPACK_GENERATOR "DEB;TGZ;ZIP")
        elseif(LSB_ID STREQUAL "CentOS" OR LSB_ID STREQUAL "RedHatEnterpriseServer" OR LSB_ID STREQUAL "Fedora")
            set(CPACK_GENERATOR "RPM;TGZ;ZIP")
        else()
            set(CPACK_GENERATOR "TGZ;ZIP")
        endif()
    else()
        set(CPACK_GENERATOR "TGZ;ZIP")
    endif()
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "${CPACK_PACKAGE_CONTACT}")
    set(CPACK_DEBIAN_PACKAGE_SECTION "devel")
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.27)")
    set(CPACK_RPM_PACKAGE_LICENSE "MIT")
    set(CPACK_RPM_PACKAGE_GROUP "Development/Tools")
    set(CPACK_RPM_PACKAGE_REQUIRES "libstdc++ >= 4.8")
endif()

include(CPack)